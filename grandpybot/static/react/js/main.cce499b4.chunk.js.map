{"version":3,"sources":["components/Form.js","components/Loading.js","components/AutoscrolledList.jsx","components/Grandpy.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","handleMessageChange","event","setState","message","target","value","handleSubmit","getMessage","state","getAnswer","preventDefault","onSubmit","this","className","type","onChange","src","process","Component","Loading","status","role","List","items","map","item","author","img","Message","React","autoscroll","isScrolledDownThreshold","Test","location","image","toString","path","isMobile","alt","Main","user","userMessage","newMessage","writeMap","data","url","first_message","second_message","writeMessage","getMap","adress","img_location","error_message","error_img","fetch","method","body","JSON","stringify","then","response","json","catch","success","mapsURL","marker","lat","lng","Math","floor","random","AutoscrolledList","onScrolled","e","console","log","onScrolledTop","alert","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"js/main.cce499b4.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Form extends Component{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            message: ''\n        }\n    }\n\n    handleMessageChange = (event) => {\n        this.setState({\n            message: event.target.value\n        })\n    };\n\n    handleSubmit =(event)=>{\n        this.props.getMessage(\"user\", this.state.message);\n        this.props.getAnswer(this.state.message);\n        this.state.message='';\n        event.preventDefault()\n    };\n\n    render(){\n      return(\n          <form onSubmit={this.handleSubmit}>\n              <div className=\"w-auto d-flex\">\n                  <input\n                    className=\"form-control input-lg\"\n                    type='text'\n                    value={this.state.message}\n                    onChange={this.handleMessageChange}>\n                  </input>\n                  <button type=\"submit\"><img src={process.env.PUBLIC_URL + '/send.png'} /></button>\n              </div>\n          </form>\n      )\n    }\n}\n\nexport default Form\n","import React, { Component } from 'react'\n\nclass Loading extends Component {\n    render() {\n        const status = this.props.status;\n\n        if(status== 'Loading'){\n            return (\n                <div className=\"spinner-border\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            );\n        }\n        return (<div></div>)\n  }\n}\n\nexport default Loading;\n","import React from \"react\";\nimport autoscroll from \"autoscroll-react\";\nimport Loading from \"./Loading\"\n\nfunction UserClass(props) {\n    const author = props.author;\n\n    if (author == \"grandpybot\"){\n        return \"list-group-item list-group-item-dark grandpybot mr-5 my-3 w-75\"\n    }\n    else{\n        return \"list-group-item active user ml-5 my-3 w-75\"\n    }\n}\n\nfunction Message(props) {\n    if (props.img){\n        return (<img src={props.img}/>)\n    }\n    else{\n        return props.message\n    }\n\n}\n\nclass List extends React.Component {\n  render() {\n    const { items } = this.props;\n    const { status } = this.props;\n\n    return (\n        <div className=\"chatbox my-2\">\n              <ul className=\"list-group\" {...this.props}>\n                {items.map(item => <li className={UserClass({author:item.author})}>{Message(item)}</li>)}\n              </ul>\n            <Loading status = { status }/>\n        </div>\n    );\n  }\n}\n\nexport default autoscroll(List, { isScrolledDownThreshold: 100 });","import React, { Component } from 'react'\nimport Img from 'react-image'\nimport {isMobile} from 'react-device-detect'\n\nclass Test extends Component {\n    render() {\n        const img = this.props.img;\n        const location = this.props.location;\n        let image= \"0\" + img.toString();\n        let path = 'static/img/grandpy/';\n        if (isMobile){\n            path += 'mobile/'\n        }\n    return (\n        <div>\n            <Img src={path + location +'/' + image + '.png'} alt=\"Grandpy\"/>\n        </div>\n    );\n  }\n}\n\nexport default Test;\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Form from \"./components/Form\";\nimport AutoscrolledList from \"./components/AutoscrolledList\";\nimport Test from \"./components/Grandpy\"\n\nfunction chooseImage() {\n    let min = 1;\n    let max = 4;\n    return Math.floor(min + (Math.random() * (max-min)));\n}\n\nclass Main extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      status: \"OK\",\n      message: [\n          {\"author\": \"grandpybot\",\n           \"message\": \"Welcome !\"}],\n      data : null,\n      img: chooseImage(),\n      img_location: \"other\"\n    };\n  }\n\n  getMessage =(user, userMessage)=> {\n    const newMessage = {\n      \"author\": user,\n      \"message\": userMessage,\n    };\n\n    this.setState({\n      message: [...this.state.message, newMessage]\n    });\n  };\n\n  writeMap =(data)=> {\n    const newMessage = {\n      \"author\": \"grandpybot\",\n      \"img\": data.url,\n      \"message\": \"\",\n    };\n\n    this.getMessage(\"grandpybot\", this.state.data.first_message);\n    this.setState({\n      message: [...this.state.message, newMessage]\n    });\n    this.getMessage(\"grandpybot\", this.state.data.second_message);\n  };\n\n  writeMessage =(data)=>{\n    this.state.data = data;\n    if(data.status =='OK'){\n      this.state.status=\"OK\";\n      this.getMap(data.adress, data.location);\n      this.state.img = data.img + 1;\n      this.state.img_location = 'anecdote'\n    }\n    else if(data.status == 'ZERO_RESULTS'){\n      this.state.status = data.status;\n      this.getMessage(\"grandpybot\", data.error_message);\n      this.setState(()=> {\n        return {img: data.error_img + 1, img_location: 'failure'}\n      });\n    }\n  };\n\n  getAnswer =(message)=> {\n    this.setState(()=>{\n      return {status: \"Loading\", img: 1, img_location: 'loading'}\n    });\n    fetch(\"/update/\", {\n      method: 'POST',\n      body: JSON.stringify(message)\n    }).then(response => response.json())\n        .then(this.writeMessage)\n        .catch();\n  };\n\n  getMap =(adress, location)=> {\n        this.state.success = false;\n        const API_KEY = \"AIzaSyBsl71VK0vPiuXN-OO1skM9lvYXCGI6pRI\";\n        let mapsURL = \"https://maps.googleapis.com/maps/api/staticmap?zoom=16&size=300x300&center=\" + adress;\n        let marker = \"&markers=color:blue7Clabel:S%7C\" + location.lat + ',' + location.lng;\n        fetch(mapsURL + marker + \"&key=\" + API_KEY)\n            .then(response => response)\n            .then(this.writeMap)\n            .catch();\n    };\n\n  render() {\n    return (\n      <div className=\"App-header d-flex\">\n          <div className=\"card bg-secondary p-3 m-5\">\n            <AutoscrolledList\n              items={this.state.message}\n              status={this.state.status}\n              onScrolled={e => console.log(\"the list was scrolled!\")}\n              onScrolledTop={e => alert(\"scrolled to top!\")}\n            />\n            <Form getMessage={this.getMessage}\n                  getAnswer={this.getAnswer}/>\n          </div>\n          <div className=\"m-3\">\n            <Test img={this.state.img}\n                  location={this.state.img_location}/>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}